// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AResource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AResource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AResource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pbc_extension.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AResource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AResource_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AResource_2eproto;
namespace Res {
class Inner;
struct InnerDefaultTypeInternal;
extern InnerDefaultTypeInternal _Inner_default_instance_;
class helloworld;
struct helloworldDefaultTypeInternal;
extern helloworldDefaultTypeInternal _helloworld_default_instance_;
}  // namespace Res
PROTOBUF_NAMESPACE_OPEN
template<> ::Res::Inner* Arena::CreateMaybeMessage<::Res::Inner>(Arena*);
template<> ::Res::helloworld* Arena::CreateMaybeMessage<::Res::helloworld>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Res {

enum NumVal : int {
  NumVal0 = 0,
  NumVal1 = 1,
  NumVal2 = 2,
  NumVal_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NumVal_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NumVal_IsValid(int value);
constexpr NumVal NumVal_MIN = NumVal0;
constexpr NumVal NumVal_MAX = NumVal2;
constexpr int NumVal_ARRAYSIZE = NumVal_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NumVal_descriptor();
template<typename T>
inline const std::string& NumVal_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NumVal>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NumVal_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NumVal_descriptor(), enum_t_value);
}
inline bool NumVal_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NumVal* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NumVal>(
    NumVal_descriptor(), name, value);
}
// ===================================================================

class Inner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Res.Inner) */ {
 public:
  inline Inner() : Inner(nullptr) {}
  ~Inner() override;
  explicit PROTOBUF_CONSTEXPR Inner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Inner(const Inner& from);
  Inner(Inner&& from) noexcept
    : Inner() {
    *this = ::std::move(from);
  }

  inline Inner& operator=(const Inner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inner& operator=(Inner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Inner& default_instance() {
    return *internal_default_instance();
  }
  static inline const Inner* internal_default_instance() {
    return reinterpret_cast<const Inner*>(
               &_Inner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Inner& a, Inner& b) {
    a.Swap(&b);
  }
  inline void Swap(Inner* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Inner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Inner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Inner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Inner& from) {
    Inner::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inner* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Res.Inner";
  }
  protected:
  explicit Inner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempFieldNumber = 1,
  };
  // int32 temp = 1;
  void clear_temp();
  int32_t temp() const;
  void set_temp(int32_t value);
  private:
  int32_t _internal_temp() const;
  void _internal_set_temp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Res.Inner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t temp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AResource_2eproto;
};
// -------------------------------------------------------------------

class helloworld final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Res.helloworld) */ {
 public:
  inline helloworld() : helloworld(nullptr) {}
  ~helloworld() override;
  explicit PROTOBUF_CONSTEXPR helloworld(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  helloworld(const helloworld& from);
  helloworld(helloworld&& from) noexcept
    : helloworld() {
    *this = ::std::move(from);
  }

  inline helloworld& operator=(const helloworld& from) {
    CopyFrom(from);
    return *this;
  }
  inline helloworld& operator=(helloworld&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const helloworld& default_instance() {
    return *internal_default_instance();
  }
  enum ObjectCase {
    kA = 12,
    kB = 13,
    kC = 14,
    OBJECT_NOT_SET = 0,
  };

  static inline const helloworld* internal_default_instance() {
    return reinterpret_cast<const helloworld*>(
               &_helloworld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(helloworld& a, helloworld& b) {
    a.Swap(&b);
  }
  inline void Swap(helloworld* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(helloworld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  helloworld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<helloworld>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const helloworld& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const helloworld& from) {
    helloworld::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(helloworld* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Res.helloworld";
  }
  protected:
  explicit helloworld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringListFieldNumber = 15,
    kEnumValListFieldNumber = 16,
    kStrFieldNumber = 2,
    kInner1FieldNumber = 4,
    kInner2FieldNumber = 5,
    kInner3FieldNumber = 6,
    kInner4FieldNumber = 7,
    kInner5FieldNumber = 8,
    kInner6FieldNumber = 9,
    kInner7FieldNumber = 10,
    kInner8FieldNumber = 11,
    kIdFieldNumber = 1,
    kOptFieldNumber = 3,
    kEnumValFieldNumber = 17,
    kAFieldNumber = 12,
    kBFieldNumber = 13,
    kCFieldNumber = 14,
  };
  // repeated string stringList = 15 [(.PBCExt.max_len_1) = "10", (.PBCExt.max_len_2) = "20"];
  int stringlist_size() const;
  private:
  int _internal_stringlist_size() const;
  public:
  void clear_stringlist();
  const std::string& stringlist(int index) const;
  std::string* mutable_stringlist(int index);
  void set_stringlist(int index, const std::string& value);
  void set_stringlist(int index, std::string&& value);
  void set_stringlist(int index, const char* value);
  void set_stringlist(int index, const char* value, size_t size);
  std::string* add_stringlist();
  void add_stringlist(const std::string& value);
  void add_stringlist(std::string&& value);
  void add_stringlist(const char* value);
  void add_stringlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stringlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stringlist();
  private:
  const std::string& _internal_stringlist(int index) const;
  std::string* _internal_add_stringlist();
  public:

  // repeated .Res.NumVal enumValList = 16 [(.PBCExt.max_len_1) = "1"];
  int enumvallist_size() const;
  private:
  int _internal_enumvallist_size() const;
  public:
  void clear_enumvallist();
  private:
  ::Res::NumVal _internal_enumvallist(int index) const;
  void _internal_add_enumvallist(::Res::NumVal value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enumvallist();
  public:
  ::Res::NumVal enumvallist(int index) const;
  void set_enumvallist(int index, ::Res::NumVal value);
  void add_enumvallist(::Res::NumVal value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enumvallist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enumvallist();

  // string str = 2 [(.PBCExt.max_len_1) = "20"];
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // .Res.Inner inner1 = 4;
  bool has_inner1() const;
  private:
  bool _internal_has_inner1() const;
  public:
  void clear_inner1();
  const ::Res::Inner& inner1() const;
  PROTOBUF_NODISCARD ::Res::Inner* release_inner1();
  ::Res::Inner* mutable_inner1();
  void set_allocated_inner1(::Res::Inner* inner1);
  private:
  const ::Res::Inner& _internal_inner1() const;
  ::Res::Inner* _internal_mutable_inner1();
  public:
  void unsafe_arena_set_allocated_inner1(
      ::Res::Inner* inner1);
  ::Res::Inner* unsafe_arena_release_inner1();

  // .Res.Inner inner2 = 5;
  bool has_inner2() const;
  private:
  bool _internal_has_inner2() const;
  public:
  void clear_inner2();
  const ::Res::Inner& inner2() const;
  PROTOBUF_NODISCARD ::Res::Inner* release_inner2();
  ::Res::Inner* mutable_inner2();
  void set_allocated_inner2(::Res::Inner* inner2);
  private:
  const ::Res::Inner& _internal_inner2() const;
  ::Res::Inner* _internal_mutable_inner2();
  public:
  void unsafe_arena_set_allocated_inner2(
      ::Res::Inner* inner2);
  ::Res::Inner* unsafe_arena_release_inner2();

  // .Res.Inner inner3 = 6;
  bool has_inner3() const;
  private:
  bool _internal_has_inner3() const;
  public:
  void clear_inner3();
  const ::Res::Inner& inner3() const;
  PROTOBUF_NODISCARD ::Res::Inner* release_inner3();
  ::Res::Inner* mutable_inner3();
  void set_allocated_inner3(::Res::Inner* inner3);
  private:
  const ::Res::Inner& _internal_inner3() const;
  ::Res::Inner* _internal_mutable_inner3();
  public:
  void unsafe_arena_set_allocated_inner3(
      ::Res::Inner* inner3);
  ::Res::Inner* unsafe_arena_release_inner3();

  // .Res.Inner inner4 = 7;
  bool has_inner4() const;
  private:
  bool _internal_has_inner4() const;
  public:
  void clear_inner4();
  const ::Res::Inner& inner4() const;
  PROTOBUF_NODISCARD ::Res::Inner* release_inner4();
  ::Res::Inner* mutable_inner4();
  void set_allocated_inner4(::Res::Inner* inner4);
  private:
  const ::Res::Inner& _internal_inner4() const;
  ::Res::Inner* _internal_mutable_inner4();
  public:
  void unsafe_arena_set_allocated_inner4(
      ::Res::Inner* inner4);
  ::Res::Inner* unsafe_arena_release_inner4();

  // .Res.Inner inner5 = 8;
  bool has_inner5() const;
  private:
  bool _internal_has_inner5() const;
  public:
  void clear_inner5();
  const ::Res::Inner& inner5() const;
  PROTOBUF_NODISCARD ::Res::Inner* release_inner5();
  ::Res::Inner* mutable_inner5();
  void set_allocated_inner5(::Res::Inner* inner5);
  private:
  const ::Res::Inner& _internal_inner5() const;
  ::Res::Inner* _internal_mutable_inner5();
  public:
  void unsafe_arena_set_allocated_inner5(
      ::Res::Inner* inner5);
  ::Res::Inner* unsafe_arena_release_inner5();

  // .Res.Inner inner6 = 9;
  bool has_inner6() const;
  private:
  bool _internal_has_inner6() const;
  public:
  void clear_inner6();
  const ::Res::Inner& inner6() const;
  PROTOBUF_NODISCARD ::Res::Inner* release_inner6();
  ::Res::Inner* mutable_inner6();
  void set_allocated_inner6(::Res::Inner* inner6);
  private:
  const ::Res::Inner& _internal_inner6() const;
  ::Res::Inner* _internal_mutable_inner6();
  public:
  void unsafe_arena_set_allocated_inner6(
      ::Res::Inner* inner6);
  ::Res::Inner* unsafe_arena_release_inner6();

  // .Res.Inner inner7 = 10;
  bool has_inner7() const;
  private:
  bool _internal_has_inner7() const;
  public:
  void clear_inner7();
  const ::Res::Inner& inner7() const;
  PROTOBUF_NODISCARD ::Res::Inner* release_inner7();
  ::Res::Inner* mutable_inner7();
  void set_allocated_inner7(::Res::Inner* inner7);
  private:
  const ::Res::Inner& _internal_inner7() const;
  ::Res::Inner* _internal_mutable_inner7();
  public:
  void unsafe_arena_set_allocated_inner7(
      ::Res::Inner* inner7);
  ::Res::Inner* unsafe_arena_release_inner7();

  // .Res.Inner inner8 = 11;
  bool has_inner8() const;
  private:
  bool _internal_has_inner8() const;
  public:
  void clear_inner8();
  const ::Res::Inner& inner8() const;
  PROTOBUF_NODISCARD ::Res::Inner* release_inner8();
  ::Res::Inner* mutable_inner8();
  void set_allocated_inner8(::Res::Inner* inner8);
  private:
  const ::Res::Inner& _internal_inner8() const;
  ::Res::Inner* _internal_mutable_inner8();
  public:
  void unsafe_arena_set_allocated_inner8(
      ::Res::Inner* inner8);
  ::Res::Inner* unsafe_arena_release_inner8();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 opt = 3;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // .Res.NumVal enumVal = 17;
  void clear_enumval();
  ::Res::NumVal enumval() const;
  void set_enumval(::Res::NumVal value);
  private:
  ::Res::NumVal _internal_enumval() const;
  void _internal_set_enumval(::Res::NumVal value);
  public:

  // float a = 12 [(.PBCExt.oneof_id) = "NUMVAL0"];
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // uint32 b = 13 [(.PBCExt.oneof_id) = "NUMVAL1"];
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  uint32_t b() const;
  void set_b(uint32_t value);
  private:
  uint32_t _internal_b() const;
  void _internal_set_b(uint32_t value);
  public:

  // .Res.Inner c = 14 [(.PBCExt.oneof_id) = "NUMVAL2"];
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  const ::Res::Inner& c() const;
  PROTOBUF_NODISCARD ::Res::Inner* release_c();
  ::Res::Inner* mutable_c();
  void set_allocated_c(::Res::Inner* c);
  private:
  const ::Res::Inner& _internal_c() const;
  ::Res::Inner* _internal_mutable_c();
  public:
  void unsafe_arena_set_allocated_c(
      ::Res::Inner* c);
  ::Res::Inner* unsafe_arena_release_c();

  void clear_object();
  ObjectCase object_case() const;
  // @@protoc_insertion_point(class_scope:Res.helloworld)
 private:
  class _Internal;
  void set_has_a();
  void set_has_b();
  void set_has_c();

  inline bool has_object() const;
  inline void clear_has_object();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stringlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enumvallist_;
    mutable std::atomic<int> _enumvallist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    ::Res::Inner* inner1_;
    ::Res::Inner* inner2_;
    ::Res::Inner* inner3_;
    ::Res::Inner* inner4_;
    ::Res::Inner* inner5_;
    ::Res::Inner* inner6_;
    ::Res::Inner* inner7_;
    ::Res::Inner* inner8_;
    int32_t id_;
    int32_t opt_;
    int enumval_;
    union ObjectUnion {
      constexpr ObjectUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      float a_;
      uint32_t b_;
      ::Res::Inner* c_;
    } object_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AResource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Inner

// int32 temp = 1;
inline void Inner::clear_temp() {
  _impl_.temp_ = 0;
}
inline int32_t Inner::_internal_temp() const {
  return _impl_.temp_;
}
inline int32_t Inner::temp() const {
  // @@protoc_insertion_point(field_get:Res.Inner.temp)
  return _internal_temp();
}
inline void Inner::_internal_set_temp(int32_t value) {
  
  _impl_.temp_ = value;
}
inline void Inner::set_temp(int32_t value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:Res.Inner.temp)
}

// -------------------------------------------------------------------

// helloworld

// int32 id = 1;
inline void helloworld::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t helloworld::_internal_id() const {
  return _impl_.id_;
}
inline int32_t helloworld::id() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.id)
  return _internal_id();
}
inline void helloworld::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void helloworld::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Res.helloworld.id)
}

// string str = 2 [(.PBCExt.max_len_1) = "20"];
inline void helloworld::clear_str() {
  _impl_.str_.ClearToEmpty();
}
inline const std::string& helloworld::str() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void helloworld::set_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Res.helloworld.str)
}
inline std::string* helloworld::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.str)
  return _s;
}
inline const std::string& helloworld::_internal_str() const {
  return _impl_.str_.Get();
}
inline void helloworld::_internal_set_str(const std::string& value) {
  
  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* helloworld::_internal_mutable_str() {
  
  return _impl_.str_.Mutable(GetArenaForAllocation());
}
inline std::string* helloworld::release_str() {
  // @@protoc_insertion_point(field_release:Res.helloworld.str)
  return _impl_.str_.Release();
}
inline void helloworld::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  _impl_.str_.SetAllocated(str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.str)
}

// int32 opt = 3;
inline void helloworld::clear_opt() {
  _impl_.opt_ = 0;
}
inline int32_t helloworld::_internal_opt() const {
  return _impl_.opt_;
}
inline int32_t helloworld::opt() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.opt)
  return _internal_opt();
}
inline void helloworld::_internal_set_opt(int32_t value) {
  
  _impl_.opt_ = value;
}
inline void helloworld::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:Res.helloworld.opt)
}

// .Res.Inner inner1 = 4;
inline bool helloworld::_internal_has_inner1() const {
  return this != internal_default_instance() && _impl_.inner1_ != nullptr;
}
inline bool helloworld::has_inner1() const {
  return _internal_has_inner1();
}
inline void helloworld::clear_inner1() {
  if (GetArenaForAllocation() == nullptr && _impl_.inner1_ != nullptr) {
    delete _impl_.inner1_;
  }
  _impl_.inner1_ = nullptr;
}
inline const ::Res::Inner& helloworld::_internal_inner1() const {
  const ::Res::Inner* p = _impl_.inner1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Res::Inner&>(
      ::Res::_Inner_default_instance_);
}
inline const ::Res::Inner& helloworld::inner1() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.inner1)
  return _internal_inner1();
}
inline void helloworld::unsafe_arena_set_allocated_inner1(
    ::Res::Inner* inner1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner1_);
  }
  _impl_.inner1_ = inner1;
  if (inner1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Res.helloworld.inner1)
}
inline ::Res::Inner* helloworld::release_inner1() {
  
  ::Res::Inner* temp = _impl_.inner1_;
  _impl_.inner1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Res::Inner* helloworld::unsafe_arena_release_inner1() {
  // @@protoc_insertion_point(field_release:Res.helloworld.inner1)
  
  ::Res::Inner* temp = _impl_.inner1_;
  _impl_.inner1_ = nullptr;
  return temp;
}
inline ::Res::Inner* helloworld::_internal_mutable_inner1() {
  
  if (_impl_.inner1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Res::Inner>(GetArenaForAllocation());
    _impl_.inner1_ = p;
  }
  return _impl_.inner1_;
}
inline ::Res::Inner* helloworld::mutable_inner1() {
  ::Res::Inner* _msg = _internal_mutable_inner1();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.inner1)
  return _msg;
}
inline void helloworld::set_allocated_inner1(::Res::Inner* inner1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner1_;
  }
  if (inner1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner1);
    if (message_arena != submessage_arena) {
      inner1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inner1_ = inner1;
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.inner1)
}

// .Res.Inner inner2 = 5;
inline bool helloworld::_internal_has_inner2() const {
  return this != internal_default_instance() && _impl_.inner2_ != nullptr;
}
inline bool helloworld::has_inner2() const {
  return _internal_has_inner2();
}
inline void helloworld::clear_inner2() {
  if (GetArenaForAllocation() == nullptr && _impl_.inner2_ != nullptr) {
    delete _impl_.inner2_;
  }
  _impl_.inner2_ = nullptr;
}
inline const ::Res::Inner& helloworld::_internal_inner2() const {
  const ::Res::Inner* p = _impl_.inner2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Res::Inner&>(
      ::Res::_Inner_default_instance_);
}
inline const ::Res::Inner& helloworld::inner2() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.inner2)
  return _internal_inner2();
}
inline void helloworld::unsafe_arena_set_allocated_inner2(
    ::Res::Inner* inner2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner2_);
  }
  _impl_.inner2_ = inner2;
  if (inner2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Res.helloworld.inner2)
}
inline ::Res::Inner* helloworld::release_inner2() {
  
  ::Res::Inner* temp = _impl_.inner2_;
  _impl_.inner2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Res::Inner* helloworld::unsafe_arena_release_inner2() {
  // @@protoc_insertion_point(field_release:Res.helloworld.inner2)
  
  ::Res::Inner* temp = _impl_.inner2_;
  _impl_.inner2_ = nullptr;
  return temp;
}
inline ::Res::Inner* helloworld::_internal_mutable_inner2() {
  
  if (_impl_.inner2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Res::Inner>(GetArenaForAllocation());
    _impl_.inner2_ = p;
  }
  return _impl_.inner2_;
}
inline ::Res::Inner* helloworld::mutable_inner2() {
  ::Res::Inner* _msg = _internal_mutable_inner2();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.inner2)
  return _msg;
}
inline void helloworld::set_allocated_inner2(::Res::Inner* inner2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner2_;
  }
  if (inner2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner2);
    if (message_arena != submessage_arena) {
      inner2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inner2_ = inner2;
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.inner2)
}

// .Res.Inner inner3 = 6;
inline bool helloworld::_internal_has_inner3() const {
  return this != internal_default_instance() && _impl_.inner3_ != nullptr;
}
inline bool helloworld::has_inner3() const {
  return _internal_has_inner3();
}
inline void helloworld::clear_inner3() {
  if (GetArenaForAllocation() == nullptr && _impl_.inner3_ != nullptr) {
    delete _impl_.inner3_;
  }
  _impl_.inner3_ = nullptr;
}
inline const ::Res::Inner& helloworld::_internal_inner3() const {
  const ::Res::Inner* p = _impl_.inner3_;
  return p != nullptr ? *p : reinterpret_cast<const ::Res::Inner&>(
      ::Res::_Inner_default_instance_);
}
inline const ::Res::Inner& helloworld::inner3() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.inner3)
  return _internal_inner3();
}
inline void helloworld::unsafe_arena_set_allocated_inner3(
    ::Res::Inner* inner3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner3_);
  }
  _impl_.inner3_ = inner3;
  if (inner3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Res.helloworld.inner3)
}
inline ::Res::Inner* helloworld::release_inner3() {
  
  ::Res::Inner* temp = _impl_.inner3_;
  _impl_.inner3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Res::Inner* helloworld::unsafe_arena_release_inner3() {
  // @@protoc_insertion_point(field_release:Res.helloworld.inner3)
  
  ::Res::Inner* temp = _impl_.inner3_;
  _impl_.inner3_ = nullptr;
  return temp;
}
inline ::Res::Inner* helloworld::_internal_mutable_inner3() {
  
  if (_impl_.inner3_ == nullptr) {
    auto* p = CreateMaybeMessage<::Res::Inner>(GetArenaForAllocation());
    _impl_.inner3_ = p;
  }
  return _impl_.inner3_;
}
inline ::Res::Inner* helloworld::mutable_inner3() {
  ::Res::Inner* _msg = _internal_mutable_inner3();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.inner3)
  return _msg;
}
inline void helloworld::set_allocated_inner3(::Res::Inner* inner3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner3_;
  }
  if (inner3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner3);
    if (message_arena != submessage_arena) {
      inner3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner3, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inner3_ = inner3;
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.inner3)
}

// .Res.Inner inner4 = 7;
inline bool helloworld::_internal_has_inner4() const {
  return this != internal_default_instance() && _impl_.inner4_ != nullptr;
}
inline bool helloworld::has_inner4() const {
  return _internal_has_inner4();
}
inline void helloworld::clear_inner4() {
  if (GetArenaForAllocation() == nullptr && _impl_.inner4_ != nullptr) {
    delete _impl_.inner4_;
  }
  _impl_.inner4_ = nullptr;
}
inline const ::Res::Inner& helloworld::_internal_inner4() const {
  const ::Res::Inner* p = _impl_.inner4_;
  return p != nullptr ? *p : reinterpret_cast<const ::Res::Inner&>(
      ::Res::_Inner_default_instance_);
}
inline const ::Res::Inner& helloworld::inner4() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.inner4)
  return _internal_inner4();
}
inline void helloworld::unsafe_arena_set_allocated_inner4(
    ::Res::Inner* inner4) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner4_);
  }
  _impl_.inner4_ = inner4;
  if (inner4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Res.helloworld.inner4)
}
inline ::Res::Inner* helloworld::release_inner4() {
  
  ::Res::Inner* temp = _impl_.inner4_;
  _impl_.inner4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Res::Inner* helloworld::unsafe_arena_release_inner4() {
  // @@protoc_insertion_point(field_release:Res.helloworld.inner4)
  
  ::Res::Inner* temp = _impl_.inner4_;
  _impl_.inner4_ = nullptr;
  return temp;
}
inline ::Res::Inner* helloworld::_internal_mutable_inner4() {
  
  if (_impl_.inner4_ == nullptr) {
    auto* p = CreateMaybeMessage<::Res::Inner>(GetArenaForAllocation());
    _impl_.inner4_ = p;
  }
  return _impl_.inner4_;
}
inline ::Res::Inner* helloworld::mutable_inner4() {
  ::Res::Inner* _msg = _internal_mutable_inner4();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.inner4)
  return _msg;
}
inline void helloworld::set_allocated_inner4(::Res::Inner* inner4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner4_;
  }
  if (inner4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner4);
    if (message_arena != submessage_arena) {
      inner4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner4, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inner4_ = inner4;
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.inner4)
}

// .Res.Inner inner5 = 8;
inline bool helloworld::_internal_has_inner5() const {
  return this != internal_default_instance() && _impl_.inner5_ != nullptr;
}
inline bool helloworld::has_inner5() const {
  return _internal_has_inner5();
}
inline void helloworld::clear_inner5() {
  if (GetArenaForAllocation() == nullptr && _impl_.inner5_ != nullptr) {
    delete _impl_.inner5_;
  }
  _impl_.inner5_ = nullptr;
}
inline const ::Res::Inner& helloworld::_internal_inner5() const {
  const ::Res::Inner* p = _impl_.inner5_;
  return p != nullptr ? *p : reinterpret_cast<const ::Res::Inner&>(
      ::Res::_Inner_default_instance_);
}
inline const ::Res::Inner& helloworld::inner5() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.inner5)
  return _internal_inner5();
}
inline void helloworld::unsafe_arena_set_allocated_inner5(
    ::Res::Inner* inner5) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner5_);
  }
  _impl_.inner5_ = inner5;
  if (inner5) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Res.helloworld.inner5)
}
inline ::Res::Inner* helloworld::release_inner5() {
  
  ::Res::Inner* temp = _impl_.inner5_;
  _impl_.inner5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Res::Inner* helloworld::unsafe_arena_release_inner5() {
  // @@protoc_insertion_point(field_release:Res.helloworld.inner5)
  
  ::Res::Inner* temp = _impl_.inner5_;
  _impl_.inner5_ = nullptr;
  return temp;
}
inline ::Res::Inner* helloworld::_internal_mutable_inner5() {
  
  if (_impl_.inner5_ == nullptr) {
    auto* p = CreateMaybeMessage<::Res::Inner>(GetArenaForAllocation());
    _impl_.inner5_ = p;
  }
  return _impl_.inner5_;
}
inline ::Res::Inner* helloworld::mutable_inner5() {
  ::Res::Inner* _msg = _internal_mutable_inner5();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.inner5)
  return _msg;
}
inline void helloworld::set_allocated_inner5(::Res::Inner* inner5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner5_;
  }
  if (inner5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner5);
    if (message_arena != submessage_arena) {
      inner5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner5, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inner5_ = inner5;
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.inner5)
}

// .Res.Inner inner6 = 9;
inline bool helloworld::_internal_has_inner6() const {
  return this != internal_default_instance() && _impl_.inner6_ != nullptr;
}
inline bool helloworld::has_inner6() const {
  return _internal_has_inner6();
}
inline void helloworld::clear_inner6() {
  if (GetArenaForAllocation() == nullptr && _impl_.inner6_ != nullptr) {
    delete _impl_.inner6_;
  }
  _impl_.inner6_ = nullptr;
}
inline const ::Res::Inner& helloworld::_internal_inner6() const {
  const ::Res::Inner* p = _impl_.inner6_;
  return p != nullptr ? *p : reinterpret_cast<const ::Res::Inner&>(
      ::Res::_Inner_default_instance_);
}
inline const ::Res::Inner& helloworld::inner6() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.inner6)
  return _internal_inner6();
}
inline void helloworld::unsafe_arena_set_allocated_inner6(
    ::Res::Inner* inner6) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner6_);
  }
  _impl_.inner6_ = inner6;
  if (inner6) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Res.helloworld.inner6)
}
inline ::Res::Inner* helloworld::release_inner6() {
  
  ::Res::Inner* temp = _impl_.inner6_;
  _impl_.inner6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Res::Inner* helloworld::unsafe_arena_release_inner6() {
  // @@protoc_insertion_point(field_release:Res.helloworld.inner6)
  
  ::Res::Inner* temp = _impl_.inner6_;
  _impl_.inner6_ = nullptr;
  return temp;
}
inline ::Res::Inner* helloworld::_internal_mutable_inner6() {
  
  if (_impl_.inner6_ == nullptr) {
    auto* p = CreateMaybeMessage<::Res::Inner>(GetArenaForAllocation());
    _impl_.inner6_ = p;
  }
  return _impl_.inner6_;
}
inline ::Res::Inner* helloworld::mutable_inner6() {
  ::Res::Inner* _msg = _internal_mutable_inner6();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.inner6)
  return _msg;
}
inline void helloworld::set_allocated_inner6(::Res::Inner* inner6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner6_;
  }
  if (inner6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner6);
    if (message_arena != submessage_arena) {
      inner6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner6, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inner6_ = inner6;
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.inner6)
}

// .Res.Inner inner7 = 10;
inline bool helloworld::_internal_has_inner7() const {
  return this != internal_default_instance() && _impl_.inner7_ != nullptr;
}
inline bool helloworld::has_inner7() const {
  return _internal_has_inner7();
}
inline void helloworld::clear_inner7() {
  if (GetArenaForAllocation() == nullptr && _impl_.inner7_ != nullptr) {
    delete _impl_.inner7_;
  }
  _impl_.inner7_ = nullptr;
}
inline const ::Res::Inner& helloworld::_internal_inner7() const {
  const ::Res::Inner* p = _impl_.inner7_;
  return p != nullptr ? *p : reinterpret_cast<const ::Res::Inner&>(
      ::Res::_Inner_default_instance_);
}
inline const ::Res::Inner& helloworld::inner7() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.inner7)
  return _internal_inner7();
}
inline void helloworld::unsafe_arena_set_allocated_inner7(
    ::Res::Inner* inner7) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner7_);
  }
  _impl_.inner7_ = inner7;
  if (inner7) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Res.helloworld.inner7)
}
inline ::Res::Inner* helloworld::release_inner7() {
  
  ::Res::Inner* temp = _impl_.inner7_;
  _impl_.inner7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Res::Inner* helloworld::unsafe_arena_release_inner7() {
  // @@protoc_insertion_point(field_release:Res.helloworld.inner7)
  
  ::Res::Inner* temp = _impl_.inner7_;
  _impl_.inner7_ = nullptr;
  return temp;
}
inline ::Res::Inner* helloworld::_internal_mutable_inner7() {
  
  if (_impl_.inner7_ == nullptr) {
    auto* p = CreateMaybeMessage<::Res::Inner>(GetArenaForAllocation());
    _impl_.inner7_ = p;
  }
  return _impl_.inner7_;
}
inline ::Res::Inner* helloworld::mutable_inner7() {
  ::Res::Inner* _msg = _internal_mutable_inner7();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.inner7)
  return _msg;
}
inline void helloworld::set_allocated_inner7(::Res::Inner* inner7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner7_;
  }
  if (inner7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner7);
    if (message_arena != submessage_arena) {
      inner7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner7, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inner7_ = inner7;
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.inner7)
}

// .Res.Inner inner8 = 11;
inline bool helloworld::_internal_has_inner8() const {
  return this != internal_default_instance() && _impl_.inner8_ != nullptr;
}
inline bool helloworld::has_inner8() const {
  return _internal_has_inner8();
}
inline void helloworld::clear_inner8() {
  if (GetArenaForAllocation() == nullptr && _impl_.inner8_ != nullptr) {
    delete _impl_.inner8_;
  }
  _impl_.inner8_ = nullptr;
}
inline const ::Res::Inner& helloworld::_internal_inner8() const {
  const ::Res::Inner* p = _impl_.inner8_;
  return p != nullptr ? *p : reinterpret_cast<const ::Res::Inner&>(
      ::Res::_Inner_default_instance_);
}
inline const ::Res::Inner& helloworld::inner8() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.inner8)
  return _internal_inner8();
}
inline void helloworld::unsafe_arena_set_allocated_inner8(
    ::Res::Inner* inner8) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner8_);
  }
  _impl_.inner8_ = inner8;
  if (inner8) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Res.helloworld.inner8)
}
inline ::Res::Inner* helloworld::release_inner8() {
  
  ::Res::Inner* temp = _impl_.inner8_;
  _impl_.inner8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Res::Inner* helloworld::unsafe_arena_release_inner8() {
  // @@protoc_insertion_point(field_release:Res.helloworld.inner8)
  
  ::Res::Inner* temp = _impl_.inner8_;
  _impl_.inner8_ = nullptr;
  return temp;
}
inline ::Res::Inner* helloworld::_internal_mutable_inner8() {
  
  if (_impl_.inner8_ == nullptr) {
    auto* p = CreateMaybeMessage<::Res::Inner>(GetArenaForAllocation());
    _impl_.inner8_ = p;
  }
  return _impl_.inner8_;
}
inline ::Res::Inner* helloworld::mutable_inner8() {
  ::Res::Inner* _msg = _internal_mutable_inner8();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.inner8)
  return _msg;
}
inline void helloworld::set_allocated_inner8(::Res::Inner* inner8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner8_;
  }
  if (inner8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner8);
    if (message_arena != submessage_arena) {
      inner8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner8, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inner8_ = inner8;
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.inner8)
}

// float a = 12 [(.PBCExt.oneof_id) = "NUMVAL0"];
inline bool helloworld::_internal_has_a() const {
  return object_case() == kA;
}
inline bool helloworld::has_a() const {
  return _internal_has_a();
}
inline void helloworld::set_has_a() {
  _impl_._oneof_case_[0] = kA;
}
inline void helloworld::clear_a() {
  if (_internal_has_a()) {
    _impl_.object_.a_ = 0;
    clear_has_object();
  }
}
inline float helloworld::_internal_a() const {
  if (_internal_has_a()) {
    return _impl_.object_.a_;
  }
  return 0;
}
inline void helloworld::_internal_set_a(float value) {
  if (!_internal_has_a()) {
    clear_object();
    set_has_a();
  }
  _impl_.object_.a_ = value;
}
inline float helloworld::a() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.a)
  return _internal_a();
}
inline void helloworld::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Res.helloworld.a)
}

// uint32 b = 13 [(.PBCExt.oneof_id) = "NUMVAL1"];
inline bool helloworld::_internal_has_b() const {
  return object_case() == kB;
}
inline bool helloworld::has_b() const {
  return _internal_has_b();
}
inline void helloworld::set_has_b() {
  _impl_._oneof_case_[0] = kB;
}
inline void helloworld::clear_b() {
  if (_internal_has_b()) {
    _impl_.object_.b_ = 0u;
    clear_has_object();
  }
}
inline uint32_t helloworld::_internal_b() const {
  if (_internal_has_b()) {
    return _impl_.object_.b_;
  }
  return 0u;
}
inline void helloworld::_internal_set_b(uint32_t value) {
  if (!_internal_has_b()) {
    clear_object();
    set_has_b();
  }
  _impl_.object_.b_ = value;
}
inline uint32_t helloworld::b() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.b)
  return _internal_b();
}
inline void helloworld::set_b(uint32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:Res.helloworld.b)
}

// .Res.Inner c = 14 [(.PBCExt.oneof_id) = "NUMVAL2"];
inline bool helloworld::_internal_has_c() const {
  return object_case() == kC;
}
inline bool helloworld::has_c() const {
  return _internal_has_c();
}
inline void helloworld::set_has_c() {
  _impl_._oneof_case_[0] = kC;
}
inline void helloworld::clear_c() {
  if (_internal_has_c()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.object_.c_;
    }
    clear_has_object();
  }
}
inline ::Res::Inner* helloworld::release_c() {
  // @@protoc_insertion_point(field_release:Res.helloworld.c)
  if (_internal_has_c()) {
    clear_has_object();
    ::Res::Inner* temp = _impl_.object_.c_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.object_.c_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Res::Inner& helloworld::_internal_c() const {
  return _internal_has_c()
      ? *_impl_.object_.c_
      : reinterpret_cast< ::Res::Inner&>(::Res::_Inner_default_instance_);
}
inline const ::Res::Inner& helloworld::c() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.c)
  return _internal_c();
}
inline ::Res::Inner* helloworld::unsafe_arena_release_c() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Res.helloworld.c)
  if (_internal_has_c()) {
    clear_has_object();
    ::Res::Inner* temp = _impl_.object_.c_;
    _impl_.object_.c_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void helloworld::unsafe_arena_set_allocated_c(::Res::Inner* c) {
  clear_object();
  if (c) {
    set_has_c();
    _impl_.object_.c_ = c;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Res.helloworld.c)
}
inline ::Res::Inner* helloworld::_internal_mutable_c() {
  if (!_internal_has_c()) {
    clear_object();
    set_has_c();
    _impl_.object_.c_ = CreateMaybeMessage< ::Res::Inner >(GetArenaForAllocation());
  }
  return _impl_.object_.c_;
}
inline ::Res::Inner* helloworld::mutable_c() {
  ::Res::Inner* _msg = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:Res.helloworld.c)
  return _msg;
}

// repeated string stringList = 15 [(.PBCExt.max_len_1) = "10", (.PBCExt.max_len_2) = "20"];
inline int helloworld::_internal_stringlist_size() const {
  return _impl_.stringlist_.size();
}
inline int helloworld::stringlist_size() const {
  return _internal_stringlist_size();
}
inline void helloworld::clear_stringlist() {
  _impl_.stringlist_.Clear();
}
inline std::string* helloworld::add_stringlist() {
  std::string* _s = _internal_add_stringlist();
  // @@protoc_insertion_point(field_add_mutable:Res.helloworld.stringList)
  return _s;
}
inline const std::string& helloworld::_internal_stringlist(int index) const {
  return _impl_.stringlist_.Get(index);
}
inline const std::string& helloworld::stringlist(int index) const {
  // @@protoc_insertion_point(field_get:Res.helloworld.stringList)
  return _internal_stringlist(index);
}
inline std::string* helloworld::mutable_stringlist(int index) {
  // @@protoc_insertion_point(field_mutable:Res.helloworld.stringList)
  return _impl_.stringlist_.Mutable(index);
}
inline void helloworld::set_stringlist(int index, const std::string& value) {
  _impl_.stringlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Res.helloworld.stringList)
}
inline void helloworld::set_stringlist(int index, std::string&& value) {
  _impl_.stringlist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Res.helloworld.stringList)
}
inline void helloworld::set_stringlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stringlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Res.helloworld.stringList)
}
inline void helloworld::set_stringlist(int index, const char* value, size_t size) {
  _impl_.stringlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Res.helloworld.stringList)
}
inline std::string* helloworld::_internal_add_stringlist() {
  return _impl_.stringlist_.Add();
}
inline void helloworld::add_stringlist(const std::string& value) {
  _impl_.stringlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Res.helloworld.stringList)
}
inline void helloworld::add_stringlist(std::string&& value) {
  _impl_.stringlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Res.helloworld.stringList)
}
inline void helloworld::add_stringlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stringlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Res.helloworld.stringList)
}
inline void helloworld::add_stringlist(const char* value, size_t size) {
  _impl_.stringlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Res.helloworld.stringList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
helloworld::stringlist() const {
  // @@protoc_insertion_point(field_list:Res.helloworld.stringList)
  return _impl_.stringlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
helloworld::mutable_stringlist() {
  // @@protoc_insertion_point(field_mutable_list:Res.helloworld.stringList)
  return &_impl_.stringlist_;
}

// repeated .Res.NumVal enumValList = 16 [(.PBCExt.max_len_1) = "1"];
inline int helloworld::_internal_enumvallist_size() const {
  return _impl_.enumvallist_.size();
}
inline int helloworld::enumvallist_size() const {
  return _internal_enumvallist_size();
}
inline void helloworld::clear_enumvallist() {
  _impl_.enumvallist_.Clear();
}
inline ::Res::NumVal helloworld::_internal_enumvallist(int index) const {
  return static_cast< ::Res::NumVal >(_impl_.enumvallist_.Get(index));
}
inline ::Res::NumVal helloworld::enumvallist(int index) const {
  // @@protoc_insertion_point(field_get:Res.helloworld.enumValList)
  return _internal_enumvallist(index);
}
inline void helloworld::set_enumvallist(int index, ::Res::NumVal value) {
  _impl_.enumvallist_.Set(index, value);
  // @@protoc_insertion_point(field_set:Res.helloworld.enumValList)
}
inline void helloworld::_internal_add_enumvallist(::Res::NumVal value) {
  _impl_.enumvallist_.Add(value);
}
inline void helloworld::add_enumvallist(::Res::NumVal value) {
  _internal_add_enumvallist(value);
  // @@protoc_insertion_point(field_add:Res.helloworld.enumValList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
helloworld::enumvallist() const {
  // @@protoc_insertion_point(field_list:Res.helloworld.enumValList)
  return _impl_.enumvallist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
helloworld::_internal_mutable_enumvallist() {
  return &_impl_.enumvallist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
helloworld::mutable_enumvallist() {
  // @@protoc_insertion_point(field_mutable_list:Res.helloworld.enumValList)
  return _internal_mutable_enumvallist();
}

// .Res.NumVal enumVal = 17;
inline void helloworld::clear_enumval() {
  _impl_.enumval_ = 0;
}
inline ::Res::NumVal helloworld::_internal_enumval() const {
  return static_cast< ::Res::NumVal >(_impl_.enumval_);
}
inline ::Res::NumVal helloworld::enumval() const {
  // @@protoc_insertion_point(field_get:Res.helloworld.enumVal)
  return _internal_enumval();
}
inline void helloworld::_internal_set_enumval(::Res::NumVal value) {
  
  _impl_.enumval_ = value;
}
inline void helloworld::set_enumval(::Res::NumVal value) {
  _internal_set_enumval(value);
  // @@protoc_insertion_point(field_set:Res.helloworld.enumVal)
}

inline bool helloworld::has_object() const {
  return object_case() != OBJECT_NOT_SET;
}
inline void helloworld::clear_has_object() {
  _impl_._oneof_case_[0] = OBJECT_NOT_SET;
}
inline helloworld::ObjectCase helloworld::object_case() const {
  return helloworld::ObjectCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Res

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Res::NumVal> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Res::NumVal>() {
  return ::Res::NumVal_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AResource_2eproto
