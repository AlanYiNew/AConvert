// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AResource.proto

#include "AResource.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Res {
PROTOBUF_CONSTEXPR Inner::Inner(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.temp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InnerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerDefaultTypeInternal() {}
  union {
    Inner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerDefaultTypeInternal _Inner_default_instance_;
PROTOBUF_CONSTEXPR helloworld::helloworld(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stringlist_)*/{}
  , /*decltype(_impl_.enumvallist_)*/{}
  , /*decltype(_impl_._enumvallist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inner1_)*/nullptr
  , /*decltype(_impl_.inner2_)*/nullptr
  , /*decltype(_impl_.inner3_)*/nullptr
  , /*decltype(_impl_.inner4_)*/nullptr
  , /*decltype(_impl_.inner5_)*/nullptr
  , /*decltype(_impl_.inner6_)*/nullptr
  , /*decltype(_impl_.inner7_)*/nullptr
  , /*decltype(_impl_.inner8_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.opt_)*/0
  , /*decltype(_impl_.enumval_)*/0
  , /*decltype(_impl_.object_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct helloworldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR helloworldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~helloworldDefaultTypeInternal() {}
  union {
    helloworld _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 helloworldDefaultTypeInternal _helloworld_default_instance_;
}  // namespace Res
static ::_pb::Metadata file_level_metadata_AResource_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_AResource_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_AResource_2eproto = nullptr;

const uint32_t TableStruct_AResource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Res::Inner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Res::Inner, _impl_.temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.str_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.opt_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.inner1_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.inner2_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.inner3_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.inner4_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.inner5_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.inner6_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.inner7_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.inner8_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.stringlist_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.enumvallist_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.enumval_),
  PROTOBUF_FIELD_OFFSET(::Res::helloworld, _impl_.object_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Res::Inner)},
  { 7, -1, -1, sizeof(::Res::helloworld)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Res::_Inner_default_instance_._instance,
  &::Res::_helloworld_default_instance_._instance,
};

const char descriptor_table_protodef_AResource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017AResource.proto\022\003Res\032\023pbc_extension.pr"
  "oto\"\025\n\005Inner\022\014\n\004temp\030\001 \001(\005\"\325\003\n\nhelloworl"
  "d\022\n\n\002id\030\001 \001(\005\022\022\n\003str\030\002 \001(\tB\005\312>\00220\022\013\n\003opt"
  "\030\003 \001(\005\022\032\n\006inner1\030\004 \001(\0132\n.Res.Inner\022\032\n\006in"
  "ner2\030\005 \001(\0132\n.Res.Inner\022\032\n\006inner3\030\006 \001(\0132\n"
  ".Res.Inner\022\032\n\006inner4\030\007 \001(\0132\n.Res.Inner\022\032"
  "\n\006inner5\030\010 \001(\0132\n.Res.Inner\022\032\n\006inner6\030\t \001"
  "(\0132\n.Res.Inner\022\032\n\006inner7\030\n \001(\0132\n.Res.Inn"
  "er\022\032\n\006inner8\030\013 \001(\0132\n.Res.Inner\022\021\n\001a\030\014 \001("
  "\002B\004\352>\0011H\000\022\021\n\001b\030\r \001(\rB\004\352>\0012H\000\022\035\n\001c\030\016 \001(\0132"
  "\n.Res.InnerB\004\352>\0013H\000\022\036\n\nstringList\030\017 \003(\tB"
  "\n\312>\00210\322>\00220\022&\n\013enumValList\030\020 \003(\0162\013.Res.N"
  "umValB\004\312>\0011\022\034\n\007enumVal\030\021 \001(\0162\013.Res.NumVa"
  "lB\017\n\006object\022\005\312>\002id*\"\n\006NumVal\022\013\n\007NumVal0\020"
  "\000\022\013\n\007NumVal2\020\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_AResource_2eproto_deps[1] = {
  &::descriptor_table_pbc_5fextension_2eproto,
};
static ::_pbi::once_flag descriptor_table_AResource_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_AResource_2eproto = {
    false, false, 582, descriptor_table_protodef_AResource_2eproto,
    "AResource.proto",
    &descriptor_table_AResource_2eproto_once, descriptor_table_AResource_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_AResource_2eproto::offsets,
    file_level_metadata_AResource_2eproto, file_level_enum_descriptors_AResource_2eproto,
    file_level_service_descriptors_AResource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_AResource_2eproto_getter() {
  return &descriptor_table_AResource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_AResource_2eproto(&descriptor_table_AResource_2eproto);
namespace Res {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NumVal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AResource_2eproto);
  return file_level_enum_descriptors_AResource_2eproto[0];
}
bool NumVal_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Inner::_Internal {
 public:
};

Inner::Inner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Res.Inner)
}
Inner::Inner(const Inner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Inner* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.temp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.temp_ = from._impl_.temp_;
  // @@protoc_insertion_point(copy_constructor:Res.Inner)
}

inline void Inner::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.temp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Inner::~Inner() {
  // @@protoc_insertion_point(destructor:Res.Inner)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Inner::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Inner::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Inner::Clear() {
// @@protoc_insertion_point(message_clear_start:Res.Inner)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.temp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inner::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Inner::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Res.Inner)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 temp = 1;
  if (this->_internal_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Res.Inner)
  return target;
}

size_t Inner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Res.Inner)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 temp = 1;
  if (this->_internal_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_temp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Inner::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Inner::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Inner::GetClassData() const { return &_class_data_; }


void Inner::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Inner*>(&to_msg);
  auto& from = static_cast<const Inner&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Res.Inner)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_temp() != 0) {
    _this->_internal_set_temp(from._internal_temp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Inner::CopyFrom(const Inner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Res.Inner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inner::IsInitialized() const {
  return true;
}

void Inner::InternalSwap(Inner* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.temp_, other->_impl_.temp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Inner::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AResource_2eproto_getter, &descriptor_table_AResource_2eproto_once,
      file_level_metadata_AResource_2eproto[0]);
}

// ===================================================================

class helloworld::_Internal {
 public:
  static const ::Res::Inner& inner1(const helloworld* msg);
  static const ::Res::Inner& inner2(const helloworld* msg);
  static const ::Res::Inner& inner3(const helloworld* msg);
  static const ::Res::Inner& inner4(const helloworld* msg);
  static const ::Res::Inner& inner5(const helloworld* msg);
  static const ::Res::Inner& inner6(const helloworld* msg);
  static const ::Res::Inner& inner7(const helloworld* msg);
  static const ::Res::Inner& inner8(const helloworld* msg);
  static const ::Res::Inner& c(const helloworld* msg);
};

const ::Res::Inner&
helloworld::_Internal::inner1(const helloworld* msg) {
  return *msg->_impl_.inner1_;
}
const ::Res::Inner&
helloworld::_Internal::inner2(const helloworld* msg) {
  return *msg->_impl_.inner2_;
}
const ::Res::Inner&
helloworld::_Internal::inner3(const helloworld* msg) {
  return *msg->_impl_.inner3_;
}
const ::Res::Inner&
helloworld::_Internal::inner4(const helloworld* msg) {
  return *msg->_impl_.inner4_;
}
const ::Res::Inner&
helloworld::_Internal::inner5(const helloworld* msg) {
  return *msg->_impl_.inner5_;
}
const ::Res::Inner&
helloworld::_Internal::inner6(const helloworld* msg) {
  return *msg->_impl_.inner6_;
}
const ::Res::Inner&
helloworld::_Internal::inner7(const helloworld* msg) {
  return *msg->_impl_.inner7_;
}
const ::Res::Inner&
helloworld::_Internal::inner8(const helloworld* msg) {
  return *msg->_impl_.inner8_;
}
const ::Res::Inner&
helloworld::_Internal::c(const helloworld* msg) {
  return *msg->_impl_.object_.c_;
}
void helloworld::set_allocated_c(::Res::Inner* c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object();
  if (c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(c);
    if (message_arena != submessage_arena) {
      c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c, submessage_arena);
    }
    set_has_c();
    _impl_.object_.c_ = c;
  }
  // @@protoc_insertion_point(field_set_allocated:Res.helloworld.c)
}
helloworld::helloworld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Res.helloworld)
}
helloworld::helloworld(const helloworld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  helloworld* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stringlist_){from._impl_.stringlist_}
    , decltype(_impl_.enumvallist_){from._impl_.enumvallist_}
    , /*decltype(_impl_._enumvallist_cached_byte_size_)*/{0}
    , decltype(_impl_.str_){}
    , decltype(_impl_.inner1_){nullptr}
    , decltype(_impl_.inner2_){nullptr}
    , decltype(_impl_.inner3_){nullptr}
    , decltype(_impl_.inner4_){nullptr}
    , decltype(_impl_.inner5_){nullptr}
    , decltype(_impl_.inner6_){nullptr}
    , decltype(_impl_.inner7_){nullptr}
    , decltype(_impl_.inner8_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.opt_){}
    , decltype(_impl_.enumval_){}
    , decltype(_impl_.object_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    _this->_impl_.str_.Set(from._internal_str(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_inner1()) {
    _this->_impl_.inner1_ = new ::Res::Inner(*from._impl_.inner1_);
  }
  if (from._internal_has_inner2()) {
    _this->_impl_.inner2_ = new ::Res::Inner(*from._impl_.inner2_);
  }
  if (from._internal_has_inner3()) {
    _this->_impl_.inner3_ = new ::Res::Inner(*from._impl_.inner3_);
  }
  if (from._internal_has_inner4()) {
    _this->_impl_.inner4_ = new ::Res::Inner(*from._impl_.inner4_);
  }
  if (from._internal_has_inner5()) {
    _this->_impl_.inner5_ = new ::Res::Inner(*from._impl_.inner5_);
  }
  if (from._internal_has_inner6()) {
    _this->_impl_.inner6_ = new ::Res::Inner(*from._impl_.inner6_);
  }
  if (from._internal_has_inner7()) {
    _this->_impl_.inner7_ = new ::Res::Inner(*from._impl_.inner7_);
  }
  if (from._internal_has_inner8()) {
    _this->_impl_.inner8_ = new ::Res::Inner(*from._impl_.inner8_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enumval_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.enumval_));
  clear_has_object();
  switch (from.object_case()) {
    case kA: {
      _this->_internal_set_a(from._internal_a());
      break;
    }
    case kB: {
      _this->_internal_set_b(from._internal_b());
      break;
    }
    case kC: {
      _this->_internal_mutable_c()->::Res::Inner::MergeFrom(
          from._internal_c());
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Res.helloworld)
}

inline void helloworld::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stringlist_){arena}
    , decltype(_impl_.enumvallist_){arena}
    , /*decltype(_impl_._enumvallist_cached_byte_size_)*/{0}
    , decltype(_impl_.str_){}
    , decltype(_impl_.inner1_){nullptr}
    , decltype(_impl_.inner2_){nullptr}
    , decltype(_impl_.inner3_){nullptr}
    , decltype(_impl_.inner4_){nullptr}
    , decltype(_impl_.inner5_){nullptr}
    , decltype(_impl_.inner6_){nullptr}
    , decltype(_impl_.inner7_){nullptr}
    , decltype(_impl_.inner8_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.opt_){0}
    , decltype(_impl_.enumval_){0}
    , decltype(_impl_.object_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_object();
}

helloworld::~helloworld() {
  // @@protoc_insertion_point(destructor:Res.helloworld)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void helloworld::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stringlist_.~RepeatedPtrField();
  _impl_.enumvallist_.~RepeatedField();
  _impl_.str_.Destroy();
  if (this != internal_default_instance()) delete _impl_.inner1_;
  if (this != internal_default_instance()) delete _impl_.inner2_;
  if (this != internal_default_instance()) delete _impl_.inner3_;
  if (this != internal_default_instance()) delete _impl_.inner4_;
  if (this != internal_default_instance()) delete _impl_.inner5_;
  if (this != internal_default_instance()) delete _impl_.inner6_;
  if (this != internal_default_instance()) delete _impl_.inner7_;
  if (this != internal_default_instance()) delete _impl_.inner8_;
  if (has_object()) {
    clear_object();
  }
}

void helloworld::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void helloworld::clear_object() {
// @@protoc_insertion_point(one_of_clear_start:Res.helloworld)
  switch (object_case()) {
    case kA: {
      // No need to clear
      break;
    }
    case kB: {
      // No need to clear
      break;
    }
    case kC: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_.c_;
      }
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OBJECT_NOT_SET;
}


void helloworld::Clear() {
// @@protoc_insertion_point(message_clear_start:Res.helloworld)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stringlist_.Clear();
  _impl_.enumvallist_.Clear();
  _impl_.str_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.inner1_ != nullptr) {
    delete _impl_.inner1_;
  }
  _impl_.inner1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inner2_ != nullptr) {
    delete _impl_.inner2_;
  }
  _impl_.inner2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inner3_ != nullptr) {
    delete _impl_.inner3_;
  }
  _impl_.inner3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inner4_ != nullptr) {
    delete _impl_.inner4_;
  }
  _impl_.inner4_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inner5_ != nullptr) {
    delete _impl_.inner5_;
  }
  _impl_.inner5_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inner6_ != nullptr) {
    delete _impl_.inner6_;
  }
  _impl_.inner6_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inner7_ != nullptr) {
    delete _impl_.inner7_;
  }
  _impl_.inner7_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inner8_ != nullptr) {
    delete _impl_.inner8_;
  }
  _impl_.inner8_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enumval_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.enumval_));
  clear_object();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* helloworld::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str = 2 [(.PBCExt.max_len_1) = "20"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Res.helloworld.str"));
        } else
          goto handle_unusual;
        continue;
      // int32 opt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Res.Inner inner1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Res.Inner inner2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Res.Inner inner3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Res.Inner inner4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Res.Inner inner5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Res.Inner inner6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner6(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Res.Inner inner7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner7(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Res.Inner inner8 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner8(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float a = 12 [(.PBCExt.oneof_id) = "1"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _internal_set_a(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 b = 13 [(.PBCExt.oneof_id) = "2"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _internal_set_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Res.Inner c = 14 [(.PBCExt.oneof_id) = "3"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string stringList = 15 [(.PBCExt.max_len_1) = "10", (.PBCExt.max_len_2) = "20"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stringlist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Res.helloworld.stringList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Res.NumVal enumValList = 16 [(.PBCExt.max_len_1) = "1"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_enumvallist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_enumvallist(static_cast<::Res::NumVal>(val));
        } else
          goto handle_unusual;
        continue;
      // .Res.NumVal enumVal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_enumval(static_cast<::Res::NumVal>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* helloworld::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Res.helloworld)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string str = 2 [(.PBCExt.max_len_1) = "20"];
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Res.helloworld.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  // int32 opt = 3;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_opt(), target);
  }

  // .Res.Inner inner1 = 4;
  if (this->_internal_has_inner1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::inner1(this),
        _Internal::inner1(this).GetCachedSize(), target, stream);
  }

  // .Res.Inner inner2 = 5;
  if (this->_internal_has_inner2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::inner2(this),
        _Internal::inner2(this).GetCachedSize(), target, stream);
  }

  // .Res.Inner inner3 = 6;
  if (this->_internal_has_inner3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::inner3(this),
        _Internal::inner3(this).GetCachedSize(), target, stream);
  }

  // .Res.Inner inner4 = 7;
  if (this->_internal_has_inner4()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::inner4(this),
        _Internal::inner4(this).GetCachedSize(), target, stream);
  }

  // .Res.Inner inner5 = 8;
  if (this->_internal_has_inner5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::inner5(this),
        _Internal::inner5(this).GetCachedSize(), target, stream);
  }

  // .Res.Inner inner6 = 9;
  if (this->_internal_has_inner6()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::inner6(this),
        _Internal::inner6(this).GetCachedSize(), target, stream);
  }

  // .Res.Inner inner7 = 10;
  if (this->_internal_has_inner7()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::inner7(this),
        _Internal::inner7(this).GetCachedSize(), target, stream);
  }

  // .Res.Inner inner8 = 11;
  if (this->_internal_has_inner8()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::inner8(this),
        _Internal::inner8(this).GetCachedSize(), target, stream);
  }

  // float a = 12 [(.PBCExt.oneof_id) = "1"];
  if (_internal_has_a()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_a(), target);
  }

  // uint32 b = 13 [(.PBCExt.oneof_id) = "2"];
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_b(), target);
  }

  // .Res.Inner c = 14 [(.PBCExt.oneof_id) = "3"];
  if (_internal_has_c()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::c(this),
        _Internal::c(this).GetCachedSize(), target, stream);
  }

  // repeated string stringList = 15 [(.PBCExt.max_len_1) = "10", (.PBCExt.max_len_2) = "20"];
  for (int i = 0, n = this->_internal_stringlist_size(); i < n; i++) {
    const auto& s = this->_internal_stringlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Res.helloworld.stringList");
    target = stream->WriteString(15, s, target);
  }

  // repeated .Res.NumVal enumValList = 16 [(.PBCExt.max_len_1) = "1"];
  {
    int byte_size = _impl_._enumvallist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          16, _impl_.enumvallist_, byte_size, target);
    }
  }

  // .Res.NumVal enumVal = 17;
  if (this->_internal_enumval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_enumval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Res.helloworld)
  return target;
}

size_t helloworld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Res.helloworld)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stringList = 15 [(.PBCExt.max_len_1) = "10", (.PBCExt.max_len_2) = "20"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stringlist_.size());
  for (int i = 0, n = _impl_.stringlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stringlist_.Get(i));
  }

  // repeated .Res.NumVal enumValList = 16 [(.PBCExt.max_len_1) = "1"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enumvallist_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_enumvallist(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._enumvallist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string str = 2 [(.PBCExt.max_len_1) = "20"];
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // .Res.Inner inner1 = 4;
  if (this->_internal_has_inner1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner1_);
  }

  // .Res.Inner inner2 = 5;
  if (this->_internal_has_inner2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner2_);
  }

  // .Res.Inner inner3 = 6;
  if (this->_internal_has_inner3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner3_);
  }

  // .Res.Inner inner4 = 7;
  if (this->_internal_has_inner4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner4_);
  }

  // .Res.Inner inner5 = 8;
  if (this->_internal_has_inner5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner5_);
  }

  // .Res.Inner inner6 = 9;
  if (this->_internal_has_inner6()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner6_);
  }

  // .Res.Inner inner7 = 10;
  if (this->_internal_has_inner7()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner7_);
  }

  // .Res.Inner inner8 = 11;
  if (this->_internal_has_inner8()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner8_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 opt = 3;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt());
  }

  // .Res.NumVal enumVal = 17;
  if (this->_internal_enumval() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_enumval());
  }

  switch (object_case()) {
    // float a = 12 [(.PBCExt.oneof_id) = "1"];
    case kA: {
      total_size += 1 + 4;
      break;
    }
    // uint32 b = 13 [(.PBCExt.oneof_id) = "2"];
    case kB: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b());
      break;
    }
    // .Res.Inner c = 14 [(.PBCExt.oneof_id) = "3"];
    case kC: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_.c_);
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData helloworld::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    helloworld::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*helloworld::GetClassData() const { return &_class_data_; }


void helloworld::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<helloworld*>(&to_msg);
  auto& from = static_cast<const helloworld&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Res.helloworld)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stringlist_.MergeFrom(from._impl_.stringlist_);
  _this->_impl_.enumvallist_.MergeFrom(from._impl_.enumvallist_);
  if (!from._internal_str().empty()) {
    _this->_internal_set_str(from._internal_str());
  }
  if (from._internal_has_inner1()) {
    _this->_internal_mutable_inner1()->::Res::Inner::MergeFrom(
        from._internal_inner1());
  }
  if (from._internal_has_inner2()) {
    _this->_internal_mutable_inner2()->::Res::Inner::MergeFrom(
        from._internal_inner2());
  }
  if (from._internal_has_inner3()) {
    _this->_internal_mutable_inner3()->::Res::Inner::MergeFrom(
        from._internal_inner3());
  }
  if (from._internal_has_inner4()) {
    _this->_internal_mutable_inner4()->::Res::Inner::MergeFrom(
        from._internal_inner4());
  }
  if (from._internal_has_inner5()) {
    _this->_internal_mutable_inner5()->::Res::Inner::MergeFrom(
        from._internal_inner5());
  }
  if (from._internal_has_inner6()) {
    _this->_internal_mutable_inner6()->::Res::Inner::MergeFrom(
        from._internal_inner6());
  }
  if (from._internal_has_inner7()) {
    _this->_internal_mutable_inner7()->::Res::Inner::MergeFrom(
        from._internal_inner7());
  }
  if (from._internal_has_inner8()) {
    _this->_internal_mutable_inner8()->::Res::Inner::MergeFrom(
        from._internal_inner8());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_opt() != 0) {
    _this->_internal_set_opt(from._internal_opt());
  }
  if (from._internal_enumval() != 0) {
    _this->_internal_set_enumval(from._internal_enumval());
  }
  switch (from.object_case()) {
    case kA: {
      _this->_internal_set_a(from._internal_a());
      break;
    }
    case kB: {
      _this->_internal_set_b(from._internal_b());
      break;
    }
    case kC: {
      _this->_internal_mutable_c()->::Res::Inner::MergeFrom(
          from._internal_c());
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void helloworld::CopyFrom(const helloworld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Res.helloworld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool helloworld::IsInitialized() const {
  return true;
}

void helloworld::InternalSwap(helloworld* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stringlist_.InternalSwap(&other->_impl_.stringlist_);
  _impl_.enumvallist_.InternalSwap(&other->_impl_.enumvallist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_, lhs_arena,
      &other->_impl_.str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(helloworld, _impl_.enumval_)
      + sizeof(helloworld::_impl_.enumval_)
      - PROTOBUF_FIELD_OFFSET(helloworld, _impl_.inner1_)>(
          reinterpret_cast<char*>(&_impl_.inner1_),
          reinterpret_cast<char*>(&other->_impl_.inner1_));
  swap(_impl_.object_, other->_impl_.object_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata helloworld::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AResource_2eproto_getter, &descriptor_table_AResource_2eproto_once,
      file_level_metadata_AResource_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Res
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Res::Inner*
Arena::CreateMaybeMessage< ::Res::Inner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Res::Inner >(arena);
}
template<> PROTOBUF_NOINLINE ::Res::helloworld*
Arena::CreateMaybeMessage< ::Res::helloworld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Res::helloworld >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
